import type { GridMouth, IdTooth, StateMouth } from './types';
type Position = 'top' | 'bottom';

const Tooth = ({
  tooth,
  onClick,
  selected,
  isShowBottom = true,
  isShowTop = true,
}: {
  tooth: IdTooth;
  onClick: (idTooth: IdTooth, position: Position) => void;
  selected: Record<Position, boolean>;
  isShowBottom: boolean;
  isShowTop: boolean;
}) => {
  return (
    <div
      key={tooth}
      className="flex flex-col items-center"
      style={{ width: '40px' }}
    >
      {isShowTop && (
        <svg
          onClick={() => onClick(tooth, 'top')}
          viewBox="314.053 290.318 42.244 41.013"
          width="42.244"
          height="41.013"
          xmlns="http://www.w3.org/2000/svg"
          fill={selected.top ? 'green' : 'grey'}
          className={`svg`}
        >
          <path
            d="M 350.434 314.356 C 349.635 315.723 349.464 319.994 349.406 321.648 C 349.406 321.932 349.12 322.218 348.836 322.218 L 347.124 322.218 L 323.149 322.218 L 321.436 322.218 C 321.15 322.218 320.866 321.991 320.866 321.648 C 320.866 319.939 320.695 315.723 319.838 314.356 C 316.871 309.457 314.643 302.223 317.839 296.811 C 319.495 293.962 322.35 292.595 325.26 292.595 C 326.801 292.595 328.285 292.936 329.713 293.678 C 329.885 293.792 330.112 293.85 330.341 293.962 L 330.398 294.019 C 330.684 294.303 336.392 298.918 342.558 298.918 C 343.815 298.918 345.127 298.691 346.439 298.235 C 347.009 298.008 347.352 297.381 347.124 296.754 C 346.895 296.183 346.21 295.842 345.64 296.071 C 342.615 297.209 339.247 296.355 336.621 295.102 C 337.821 294.988 338.961 294.589 340.103 293.964 C 341.644 293.11 343.357 292.654 345.012 292.654 C 346.098 292.654 347.181 292.826 348.209 293.224 C 349.921 293.851 351.405 295.047 352.433 296.813 C 355.629 302.223 353.404 309.457 350.434 314.356 M 347.124 328.482 C 347.124 328.823 346.895 329.052 346.553 329.052 L 323.719 329.052 C 323.376 329.052 323.149 328.825 323.149 328.482 L 323.149 324.495 L 347.124 324.495 L 347.124 328.482 Z M 349.008 291.115 C 347.751 290.659 346.382 290.375 344.955 290.375 C 342.844 290.375 340.731 290.945 338.904 292.027 C 337.819 292.654 336.736 292.938 335.479 292.938 C 334.052 292.938 332.454 292.482 330.741 291.685 C 329.029 290.774 327.144 290.318 325.262 290.318 C 321.267 290.318 317.842 292.255 315.9 295.672 C 312.246 301.881 314.588 310.027 317.956 315.552 C 318.185 316.007 318.583 318.057 318.641 321.703 C 318.641 323.07 319.669 324.208 320.924 324.437 L 320.924 324.495 L 320.924 328.482 C 320.924 330.076 322.178 331.331 323.779 331.331 L 346.613 331.331 C 348.211 331.331 349.468 330.078 349.468 328.482 L 349.468 324.495 L 349.468 324.437 C 350.78 324.153 351.75 323.013 351.75 321.703 C 351.808 318.057 352.208 316.007 352.435 315.552 C 355.803 310.025 358.086 301.938 354.434 295.672 C 353.175 293.563 351.291 291.969 349.008 291.115 Z"
            transform="matrix(1, 0, 0, 1, 0, 7.105427357601002e-15)"
          ></path>
        </svg>
      )}

      <span>{tooth}</span>

      {isShowBottom && (
        <svg
          onClick={() => onClick(tooth, 'bottom')}
          viewBox="321.441 333.609 27.399 29.622"
          width="27.399"
          height="29.622"
          xmlns="http://www.w3.org/2000/svg"
          fill={selected.bottom ? 'green' : 'grey'}
          className="svg"
        >
          <path
            d="M 338.62 358.103 C 338.219 359.754 336.793 360.952 335.137 360.952 C 333.482 360.952 332.055 359.814 331.655 358.103 L 331.54 357.533 L 329.2 357.533 L 329.487 358.616 C 330.114 361.293 332.454 363.231 335.194 363.231 C 337.935 363.231 340.275 361.351 340.903 358.616 L 341.189 357.533 L 338.849 357.533 L 338.62 358.103 Z"
            transform="matrix(1, 0, 0, 1, 0, 7.105427357601002e-15)"
          ></path>
          <path
            d="M 343.698 351.267 L 342.556 351.267 L 342.957 349.558 L 340.616 349.558 L 339.817 352.975 L 330.455 352.975 L 329.656 349.558 L 327.316 349.558 L 327.717 351.267 L 326.574 351.267 C 325.947 351.267 325.432 351.78 325.432 352.405 C 325.432 353.033 325.945 353.544 326.574 353.544 L 328.287 353.544 L 328.459 354.341 L 328.687 355.252 C 328.745 355.252 328.859 355.252 328.916 355.252 L 329.601 355.252 L 331.027 355.252 L 339.304 355.252 L 340.731 355.252 L 341.416 355.252 C 341.473 355.252 341.587 355.252 341.644 355.252 L 341.873 354.341 L 341.988 353.544 L 343.7 353.544 C 344.328 353.544 344.843 353.031 344.843 352.405 C 344.841 351.78 344.328 351.267 343.698 351.267"
            transform="matrix(1, 0, 0, 1, 0, 7.105427357601002e-15)"
          ></path>
          <path
            d="M 345.983 342.722 L 344.499 342.722 L 344.786 341.584 L 342.446 341.584 L 341.647 345.001 L 328.63 345.001 L 327.831 341.584 L 325.491 341.584 L 325.777 342.722 L 324.294 342.722 C 323.666 342.722 323.151 343.235 323.151 343.861 C 323.151 344.488 323.664 344.999 324.294 344.999 L 326.292 344.999 L 326.805 347.278 L 327.719 347.278 L 329.145 347.278 L 341.134 347.278 L 342.56 347.278 L 343.474 347.278 L 343.987 344.999 L 345.985 344.999 C 346.613 344.999 347.128 344.486 347.128 343.861 C 347.124 343.235 346.611 342.722 345.983 342.722"
            transform="matrix(1, 0, 0, 1, 0, 7.105427357601002e-15)"
          ></path>
          <path
            d="M 347.696 334.748 L 346.384 334.748 L 346.67 333.609 L 344.33 333.609 L 343.531 337.026 L 326.748 337.026 L 325.949 333.609 L 323.609 333.609 L 323.895 334.748 L 322.583 334.748 C 321.956 334.748 321.441 335.261 321.441 335.886 C 321.441 336.513 321.953 337.024 322.583 337.024 L 324.41 337.024 L 324.923 339.303 L 326.008 339.303 L 327.32 339.303 L 343.018 339.303 L 344.273 339.303 L 345.301 339.303 L 345.814 337.024 L 347.698 337.024 C 348.325 337.024 348.84 336.511 348.84 335.886 C 348.836 335.261 348.323 334.748 347.696 334.748"
            transform="matrix(1, 0, 0, 1, 0, 7.105427357601002e-15)"
          ></path>
        </svg>
      )}
    </div>
  );
};

export const TeethGrid = ({
  gridMouth,
  isShowBottom,
  isShowTop,

  onChange,
  value,
}: {
  gridMouth: GridMouth;
  isShowBottom: boolean;
  isShowTop: boolean;

  value: StateMouth;
  onChange: (data: StateMouth) => void;
}) => {
  const toggleTooth = (id: IdTooth, position: Position) => {
    const preValue = value[id];
    const newValue = {
      ...preValue,
      [position]: !preValue[position],
    };
    const newState = { ...value, [id]: newValue };

    onChange(newState);
    return newState;
  };

  return (
    <div className="flex flex-col gap-4">
      {gridMouth.map((row, rowIndex) => (
        <div key={rowIndex} className="flex justify-between flex-wrap gap-2">
          {row.map((tooths, toothsIndex) => (
            <div key={toothsIndex} className="flex flex-row gap-1.5">
              {tooths.map((tooth) => {
                const idTooth: IdTooth = `${
                  rowIndex + rowIndex + toothsIndex + 1
                }.${tooth}`;

                return (
                  <Tooth
                    isShowBottom={isShowBottom}
                    isShowTop={isShowTop}
                    key={idTooth}
                    tooth={idTooth}
                    selected={value[idTooth]}
                    onClick={toggleTooth}
                  />
                );
              })}
            </div>
          ))}
        </div>
      ))}
    </div>
  );
};
